name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  S3_BUCKET_NAME: jigglog-backend-kotlin
  APP_NAME: jigglogkotlin
  GROUP_NAME: jigglogkotlin
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

      ## create application.properties
    - name: make application.yml
      run:
        touch ./src/main/resources/application.yml
      shell: bash

    - name: deliver application.yml
      run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
      shell: bash

    - name: deliver .env
      run: echo "${{ secrets.ENV }}" > ./.env
      shell: bash


    # Build
    - name: Build with Gradle
      run: ./gradlew clean build

    - name: Make zip file
      run: zip -r ./$GITHUB_SHA.zip .
#
#    # S3 Bucket으로 copy
#    - name: Deliver to AWS S3
#      env:
#        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip
#
#    # Deploy
#    - name: Deploy
#      env:
#        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      run: aws deploy create-deployment --application-name $APP_NAME --deployment-group-name $GROUP_NAME --file-exists-behavior OVERWRITE --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$GITHUB_SHA.zip --region ap-northeast-2


    # docker build & push to production
    - name: Docker build & push to prod
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${APP_NAME} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${APP_NAME}

    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      with:
        key: ${{ secrets.AWS_SSH_KEY }}
        host: ${{ secrets.EC2_HOST_IP4_PUBLIC }} # EC2 퍼블릭 IPv4 DNS
        username: ubuntu
        port: 22
        script: |
          sudo docker ps
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${APP_NAME}
          sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${APP_NAME} --name ${APP_NAME} 
          sudo docker image prune -f